var ndarray = require('ndarray');
var array_equals = require('array-equal');

var are_indices_terminal = module.exports.are_indices_terminal = function(indices, args){
  var arg_lengths = args.map(function(val){
    return val.data.length - 1;
  });

  return array_equals(indices, arg_lengths);
};

var check_index = module.exports.check_index = function(index, arg){
  if(index < arg.data.length - 1)
    return true;

  return false;
};

var conditionally_increment = module.exports.conditionally_increment = function(indices, args, i){
  var ret = false;
  if(check_index(indices[i], args[i])){
    indices[i] = indices[i] + 1;
    ret = true;
  }
  else
    indices[i] = 0;

  return ret;  
};

var increment_indices = module.exports.increment_indices = function(indices, args){
  var i = 0;
  while(!conditionally_increment(indices, args, i)){
    i++;
  }
};

var copy_data_tuple = module.exports.copy_data_tuple = function(indices, count, args, dest){
  for(var i = 0; i < indices.length; i++){
    var val = args[i].get(indices[i]);
    dest.set(count, i, val);
  }
};

var all_same_type = module.exports.all_same_type = function(args){
  for(var i = 0; i < args.length; i++){
    if(i < args.length - 1){
      if(args[i].dtype !== args[i+1].dtype)
        return false;
    }
  }
  return true;
};

var allocate_ndarray = module.exports.allocate_ndarray = function(args){
  if(!all_same_type(args))
    return undefined;
  var length = 1;

  for(var i = 0; i < args.length; i++){
    length = length * args[i].data.length;
  }

  var construct = args[0].data.constructor;

  var data = new construct(length * args.length);

  var arr = ndarray(data, [length, args.length]);

  return arr;
}

var write_cartesian_product = module.exports.write_cartesian_product = function(arr, args){
  var count = 0;
  var indices = Array.apply(null, new Array(args.length)).map(Number.prototype.valueOf, 0); 

  while(!are_indices_terminal(indices, args)){
    copy_data_tuple(indices, count, args, arr);
    increment_indices(indices, args);
    count++;
  }

  copy_data_tuple(indices, count, args, arr);
};
